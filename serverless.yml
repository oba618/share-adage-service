service: share-adage-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  environment:
    COGNITO_CLIENT_ID: ${self:custom.otherfile.environment.${self:provider.stage}.cognitoClientId}
    COGNITO_USER_POOL_ID: ${self:custom.otherfile.environment.${self:provider.stage}.cognitoUserPoolId}
    TABLE_NAME_PREFIX: ${self:custom.otherfile.environment.${self:provider.stage}.tableNamePrefix}
    LAMBDA_STAGE: ${self:custom.otherfile.environment.${self:provider.stage}.lambdaStage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource:
        - "*"

package:
  exclude:
    - .pytest_cache/**
    - .envrc
    - .serverless/**
    - .vscode/**
    - functions/_pycache_
    - tests/**
    - conf/**

custom:
  defaultStage: to
  otherfile:
    environment:
      dev: ${file(./conf/dev.yml)}
      to: ${file(./conf/to.yml)}
  authorizer:
    arn: ${self:custom.otherfile.environment.${self:provider.stage}.cognitoUserPoolArn}

layers:
  common:
    path: layer
    name: ${self:service}-${self:provider.stage}-common

resources:
  - ${file(serverless/dynamodb.yml)}

functions:
  adageGet:
    handler: functions/adage.get
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage
          method: get
  adagePost:
    handler: functions/adage.post
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage
          method: post
          authorizer: ${self:custom.authorizer}
          cors: true
  adagePostByGuest:
    handler: functions/adage.post_by_guest
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage/guest
          method: post
          cors: true
  adagePatch:
    handler: functions/adage.patch
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage/{adageId}
          method: patch
          cors: true

  episodePost:
    handler: functions/episode.post
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /episode
          method: post
          cors: true
  episodeGetById:
    handler: functions/episode.get_by_id
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage/{adageId}/episode/{userId}
          method: get
          authorizer: ${self:custom.authorizer}
          cors: true
  episodePatch:
    handler: functions/episode.patch
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /adage/{adageId}/episode/{userId}
          method: patch
          cors: true
  episodeDelete:
    handler: functions/episode.delete
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /episode/{adageId}
          method: delete
          authorizer: ${self:custom.authorizer}
          cors: true

  heartPost:
    handler: functions/heart.post
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /heart/{userId}
          method: post
          authorizer: ${self:custom.authorizer}
          cors: true
  heartHistoryDelete:
    handler: functions/heart.delete_history
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /heart
          method: delete
          authorizer: ${self:custom.authorizer}
          cors: true

  userPost:
    handler: functions/user.post
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user
          method: post
          cors: true
  userGet:
    handler: functions/user.get
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user
          method: get
          authorizer: ${self:custom.authorizer}
          cors: true
  userPut:
    handler: functions/user.put
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user
          method: put
          authorizer: ${self:custom.authorizer}
          cors: true
  userConfirm:
    handler: functions/user.confirm
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user/confirm
          method: post
          cors: true
  userLogin:
    handler: functions/user.login
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user/login
          method: post
          cors: true
  userSendResetPasswordCode:
    handler: functions/user.send_reset_password_code
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user/sendResetPasswordCode
          method: post
          cors: true
  userResetPassword:
    handler: functions/user.reset_password
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user/resetPassword
          method: post
          cors: true
  userDelete:
    handler: functions/user.delete
    layers:
      - { Ref: CommonLambdaLayer }
    events:
      - http:
          path: /user
          method: delete
          authorizer: ${self:custom.authorizer}
          cors: true
